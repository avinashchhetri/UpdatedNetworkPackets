#!/usr/bin/perl
#
# This is a text SSH replay program. It will replay details of the
# original SSH session using timestamps from the packet capture log.
#
# USAGE: run the script as normal. You can provide a factor as an
#	argument, eg "2" to run twice as fast, or "0.5" to run
#	at half time. eg,
# 		./session_0002.textSSH.replay 2
#
# Auto generated by Chaosreader.
#
$| = 1;
$factor = $ARGV[0] || 1;
sub ms {
	$ms = shift;
	$ms = $ms / $factor;
	select(undef, undef, undef, $ms);
}
print <<'SUBEND';
SSH text analysis replay
------------------------
"*" is client traffic (including keystrokes), "." is the return text.
A number is a multiple of the previous char, eg ".32" is 32 return chars.

SUBEND
print '.';
ms(1.75293707847595);
print '*
';
ms(0.000280857086181641);
print '.';
ms(1.9073486328125e-05);
print '.
';
ms(0.758543968200684);
print '*';
ms(0.000210046768188477);
print '.';
ms(0.183361053466797);
print '*';
ms(0.000195980072021484);
print '.';
ms(0.364387035369873);
print '*';
ms(0.000195026397705078);
print '.';
ms(0.0752148628234863);
print '*';
ms(0.000185966491699219);
print '.';
ms(0.151834011077881);
print '*';
ms(0.00020599365234375);
print '.';
ms(4.15978813171387);
print '*';
ms(0.000218868255615234);
print '.';
ms(0.27856707572937);
print '*';
ms(0.000190973281860352);
print '.';
ms(0.15428614616394);
print '*';
ms(0.000189781188964844);
print '.';
ms(0.161222219467163);
print '*';
ms(0.000201940536499023);
print '.';
ms(1.9411199092865);
print '*';
ms(0.000164985656738281);
print '.';
ms(0.289288997650146);
print '*';
ms(0.000139951705932617);
print '.';
ms(0.166758060455322);
print '*';
ms(0.000143051147460938);
print '.';
ms(0.897855043411255);
print '*';
ms(0.000226020812988281);
print '.';
ms(0.165397882461548);
print '*';
ms(0.000194072723388672);
print '.';
ms(0.151592016220093);
print '*';
ms(0.000185012817382812);
print '.';
ms(0.182167053222656);
print '*';
ms(0.000187873840332031);
print '.';
ms(0.569631099700928);
print '*';
ms(0.000139951705932617);
print '.';
ms(0.231860876083374);
print '*';
ms(0.000195980072021484);
print '.';
ms(0.103833198547363);
print '*';
ms(0.000188827514648438);
print '.';
ms(0.101750135421753);
print '*';
ms(0.000160932540893555);
print '.';
ms(0.137869119644165);
print '*';
ms(0.000185966491699219);
print '.';
ms(0.127753973007202);
print '*';
ms(0.000182867050170898);
print '.';
ms(0.0919201374053955);
print '*';
ms(0.000191926956176758);
print '.';
ms(0.219681024551392);
print '*';
ms(0.000199079513549805);
print '.';
ms(0.0959718227386475);
print '*';
ms(0.000191211700439453);
print '.';
ms(0.199687004089355);
print '*';
ms(0.000134944915771484);
print '.';
ms(0.743887901306152);
print '*
';
ms(0.000137090682983398);
print '.16';
ms(0.0877559185028076);
print '.1024';
ms(0.000672101974487305);
print '.2256';
ms(0.00238990783691406);
print '.1024';
ms(0.00732207298278809);
print '.1728';
ms(0.00262188911437988);
print '.1088';
ms(0.0013740062713623);
print '.1024';
ms(0.000585079193115234);
print '.2048';
ms(0.000711917877197266);
print '.1536';
ms(0.0005340576171875);
print '.1440';
ms(0.000554084777832031);
print '.1072';
ms(0.000558853149414062);
print '.96
';
ms(3.16200304031372);
print '*';
ms(0.000221014022827148);
print '.';
ms(0.164443016052246);
print '*';
ms(0.000180959701538086);
print '.';
ms(0.171075105667114);
print '*
';
ms(0.000201940536499023);
print '.48';
ms(0);
print "

Summary: 18.07 seconds, 16708 bytes, 0.91 Kb/sec\n";